import mongoose from "mongoose";
import Comment from "../models/comment.model";
import Product from "../models/product.model";
import Order from "../models/order.model";
import { sendMail } from "../utils/sendMail";
import {
  addCommentValidation,
  updateCommentStatusValidation,
  replyToCommentValidation,
} from "../validations/comment.validation";
import { nontifyAdmin } from "./nontification.controller";
import { getSocketInstance } from "../socket";
import path from "path";

// Hi·ªÉn th·ªã danh s√°ch b√¨nh lu·∫≠n (c√≥ th·ªÉ l·ªçc theo ng∆∞·ªùi d√πng,s·∫£n ph·∫©m, tr·∫°ng th√°i, th·ªùi gian )
export const getAllComment = async (req, res) => {
  try {
    const {
      _page = 1,
      _limit = 10,
      _sort = "createdAt",
      _order,
      search,
      status,
      rating,
      startDate,
      endDate,
    } = req.query;

    const query = {};

    if (status) {
      const allowedStatus = ["hidden", "visible"];
      if (!allowedStatus.includes(status)) {
        return res.status(400).json({ message: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá." });
      }
      query.status = status;
    }

    // Validate rating t·ª´ 1-5
    if (rating) {
      const ratingNum = parseInt(rating);
      if (ratingNum < 1 || ratingNum > 5) {
        return res.status(400).json({ message: "S·ªë sao ph·∫£i t·ª´ 1 ƒë·∫øn 5" });
      }
      query.rating = ratingNum;
    }

    // L·ªçc theo kho·∫£ng th·ªùi gian
    if ((startDate && !endDate) || (!startDate && endDate)) {
      return res
        .status(400)
        .json({ message: "Thi·∫øu ng√†y b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c." });
    }
    if (startDate && endDate) {
      const start = new Date(startDate);
      const end = new Date(endDate);

      if (isNaN(start) || isNaN(end)) {
        return res
          .status(400)
          .json({ message: "ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá." });
      }

      if (start > end) {
        return res.status(400).json({
          message: "Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i tr∆∞·ªõc ho·∫∑c b·∫±ng ng√†y k·∫øt th√∫c.",
        });
      }

      start.setHours(0, 0, 0, 0);
      end.setHours(23, 59, 59, 999);
      query.createdAt = { $gte: start, $lte: end };
    }

    // T·∫°o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm t·ªïng qu√°t
    const normalize = (str) =>
      str
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/ƒë/g, "d")
        .replace(/ƒê/g, "D");

    const searchNormalized = search ? normalize(search) : null;

    const options = {
      page: parseInt(_page, 10),
      limit: parseInt(_limit, 10),
      sort: { [_sort]: _order === "desc" ? -1 : 1 },
      populate: [
        { path: "productId", select: "name" },
        { path: "userId", select: "fullName email" }
      ],
    };

    const allComments = await Comment.paginate(query, options);

    const updatePromises = [];
    allComments.docs.forEach((comment) => {
      // N·∫øu kh√¥ng c√≤n productId (s·∫£n ph·∫©m ƒë√£ b·ªã x√≥a) v√† status ch∆∞a l√† hidden th√¨ c·∫≠p nh·∫≠t
      if (!comment.productId && comment.status !== "hidden") {
        updatePromises.push(
          Comment.findByIdAndUpdate(comment._id, { status: "hidden" })
        );
        comment.status = "hidden"; // c·∫≠p nh·∫≠t lu√¥n trong k·∫øt qu·∫£ tr·∫£ v·ªÅ
      }
    });
    if (updatePromises.length > 0) {
      await Promise.all(updatePromises);
    }

    // L·ªçc th√™m theo t√™n s·∫£n ph·∫©m ho·∫∑c ng∆∞·ªùi d√πng sau khi populate (do MongoDB kh√¥ng join s√¢u)
    if (searchNormalized) {
      allComments.docs = allComments.docs.filter((c) => {
        const product = c.productId?.name ? normalize(c.productId.name) : "";
        const user = c.userId?.fullName ? normalize(c.userId.fullName) : "";
        const email = c.userId?.email ? normalize(c.userId.email) : "";

        return (
          product.includes(searchNormalized) ||
          user.includes(searchNormalized) ||
          email.includes(searchNormalized)
        );
      });
    }

    return res.status(200).json(allComments);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

export const getCommentById = async (req, res) => {
  try {
    const { id } = req.params;

    const comment = await Comment.findById(id)
      .populate("productId", "name")
      .populate("userId", "fullName email")
      .populate("orderId", "orderCode");

    if (!comment) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n." });
    }

    if (!comment.productId && comment.status !== "hidden") {
      comment.status = "hidden";
      await comment.save();
    }

    //  üëâ L·∫•y th√¥ng tin bi·∫øn th·ªÉ s·∫£n ph·∫©m n·∫øu c√≥ (v√≠ d·ª•: m√†u s·∫Øc: #ffffff, k√≠ch th∆∞·ªõc: M)
    let variationAttributes = [];

    const productId = comment.productId?._id?.toString();
    const variationId = comment.variationId?.toString();

    if (productId && variationId) {
      const product = await Product.findById(productId)
        .select("variation")
        .lean();

      const matchedVariant = product?.variation?.find(
        (v) => v._id.toString() === variationId
      );

      variationAttributes =
        matchedVariant?.attributes?.map((attr) => ({
          name: attr.attributeName,
          value: attr.values?.[0],
        })) || [];
    }

    // üëâ G·∫Øn th√™m variationInfo v√†o k·∫øt qu·∫£ tr·∫£ v·ªÅ
    const commentWithVariant = {
      ...comment.toObject(), // ƒë·∫£m b·∫£o object thu·∫ßn
      variationInfo: {
        attributes: variationAttributes,
      },
    };

    return res.status(200).json(commentWithVariant);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// Th√™m b√¨nh lu·∫≠n, ƒë√°nh gi√° cho s·∫£n ph·∫©m(Ch·ªâ cho ph√©p ng∆∞·ªùi d√πng ƒë√£ mua h√†ng v√† ƒëƒÉng nh·∫≠p m·ªõi c√≥ th·ªÉ b√¨nh lu·∫≠n)
export const addComment = async (req, res) => {
  try {
    const { error, value } = addCommentValidation.validate(req.body, {
      abortEarly: false,
      convert: false,
    });
    if (error) {
      const errors = error.details.map((err) => err.message);
      return res.status(400).json({ message: errors });
    }
    const { orderId, productId, content, rating, images } = value;
    const user = req.user;
    const userId = user._id;

    // Ki·ªÉm tra ƒë∆°n h√†ng t·ªìn t·∫°i v√† ƒë√£ ho√†n th√†nh
    const order = await Order.findOne({
      _id: orderId,
      userId,
      status: 4, // 4: Ho√†n th√†nh ƒë∆°n h√†ng
      paymentStatus: 1, // 1: ƒê√£ thanh to√°n
    });

    if (!order) {
      return res.status(403).json({
        message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ho·∫∑c ƒë∆°n h√†ng ch∆∞a ho√†n th√†nh.",
      });
    }

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong ƒë∆°n h√†ng kh√¥ng
    const matchedItem = order.items.find(
      (item) =>
        item.productId?.toString() ===
        new mongoose.Types.ObjectId(productId).toString()
    );

    if (!matchedItem) {
      return res.status(403).json({
        message: "S·∫£n ph·∫©m n√†y kh√¥ng c√≥ trong ƒë∆°n h√†ng.",
      });
    }

    // T·∫°o b√¨nh lu·∫≠n m·ªõi v·ªõi tr·∫°ng th√°i visible
    const comment = await Comment.create({
      productId,
      variationId: matchedItem.variationId || null,
      userId,
      orderId,
      content: content || "",
      images: images || [],
      rating,
      status: "visible", // M·∫∑c ƒë·ªãnh l√† visible
    });

    // C·∫≠p nh·∫≠t rating trung b√¨nh c·ªßa s·∫£n ph·∫©m
    const allRatings = await Comment.find({
      productId,
      status: "visible", // Ch·ªâ t√≠nh c√°c b√¨nh lu·∫≠n visible
    }).select("rating");

    const totalRatings = allRatings.length;
    const sumRatings = allRatings.reduce(
      (sum, item) => sum + Number(item.rating),
      0
    );
    const avgRating = totalRatings > 0 ? sumRatings / totalRatings : 0;

    // T√≠nh ratingCount theo t·ª´ng m·ª©c sao
    const ratingCount = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    allRatings.forEach(({ rating }) => {
      ratingCount[rating] = (ratingCount[rating] || 0) + 1;
    });

    const updatedProduct = await Product.findByIdAndUpdate(
      productId,
      {
        averageRating: avgRating,
        reviewCount: totalRatings,
        ratingCount: ratingCount,
      },
      { new: true }
    );

    // emit event socket ƒë·ªÉ reload l·∫°i danh s√°ch b√¨nh lu·∫≠n ph√≠a qu·∫£n tr·ªã
    const io = getSocketInstance();
    io.to("admin").emit("comment-added", comment);

    // G·ª≠i th√¥ng b√°o realtime cho ph√≠a qu·∫£n tr·ªã
    await nontifyAdmin(
      2,
      "C√≥ ƒë√°nh gi√° m·ªõi",
      `Ng∆∞·ªùi d√πng ${user.fullName} ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m ${updatedProduct.name}`,
      comment._id.toString(),
      null
    );

    return res.status(200).json({
      message: "ƒê√°nh gi√° th√†nh c√¥ng.",
      comment,
      updatedProduct,
    });
  } catch (error) {
    return res.status(500).json({
      message: "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau.",
      error: error.message,
    });
  }
};

// C·∫≠p nh·∫≠p tr·∫°ng th√°i duy·ªát c·ªßa b√¨nh lu·∫≠n
export const updateCommentStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { error, value } = updateCommentStatusValidation.validate(req.body, {
      abortEarly: false,
      convert: false,
    });
    if (error) {
      const errors = error.details.map((err) => err.message);
      return res.status(400).json({ message: errors });
    }

    const { status } = value;

    const updatedComment = await Comment.findByIdAndUpdate(
      id,
      { status: status },
      { new: true }
    );

    if (!updatedComment) {
      return res.status(404).json({ message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i." });
    }

    // C·∫≠p nh·∫≠p l·∫°i s·ªë sao trung b√¨nh m·ªói l·∫ßn duy·ªát b√¨nh lu·∫≠n
    const productId = updatedComment.productId;
    const allRatings = await Comment.find({
      productId,
      status: "visible", // Ch·ªâ t√≠nh c√°c b√¨nh lu·∫≠n ƒë√£ ph√™ duy·ªát
    }).select("rating");

    const totalRatings = allRatings.length;
    const sumRatings = allRatings.reduce(
      (sum, item) => sum + Number(item.rating),
      0
    );
    const avgRating = totalRatings > 0 ? sumRatings / totalRatings : 0;

    // T√≠nh ratingCount theo t·ª´ng m·ª©c sao
    const ratingCount = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };
    allRatings.forEach(({ rating }) => {
      ratingCount[rating] = (ratingCount[rating] || 0) + 1;
    });

    await Product.findByIdAndUpdate(productId, {
      averageRating: avgRating,
      reviewCount: totalRatings,
      ratingCount: ratingCount,
    });

    return res.status(200).json({
      message: `C·∫≠p nh·∫≠t tr·∫°ng th√°i b√¨nh lu·∫≠n th√†nh c√¥ng.`,
      comment: updatedComment,
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// Admin tr·∫£ l·ªùi l·∫°i b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng
export const replyToComment = async (req, res) => {
  try {
    const { id } = req.params;
    const { error, value } = replyToCommentValidation.validate(req.body, {
      abortEarly: false,
    });
    if (error) {
      const errors = error.details.map((err) => err.message);
      return res.status(400).json({ message: errors });
    }

    const { adminReply, sendEmail } = value;

    const existingComment = await Comment.findById(id).populate(
      "userId",
      "email fullName"
    );

    if (!existingComment) {
      return res.status(404).json({ message: "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i." });
    }

    if (existingComment.status !== "visible") {
      return res
        .status(400)
        .json({ message: "Ch·ªâ ƒë∆∞·ª£c tr·∫£ l·ªùi b√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c duy·ªát." });
    }

    const updatedComment = await Comment.findByIdAndUpdate(
      id,
      {
        adminReply,
        replyAt: new Date(),
      },
      { new: true }
    );

    // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† ph·∫£n h·ªìi l·∫ßn ƒë·∫ßu kh√¥ng
    const isFirstReply = !existingComment.adminReply;

    // G·ª≠i email th√¥ng b√°o cho user (n·∫øu c√≥ t√≠ch checkbox g·ª≠i mail)
    if (sendEmail && existingComment.userId?.email) {
      await sendMail({
        to: existingComment.userId.email,
        subject: isFirstReply
          ? "Ph·∫£n h·ªìi b√¨nh lu·∫≠n t·ª´ Binova Shop"
          : "C·∫≠p nh·∫≠t ph·∫£n h·ªìi b√¨nh lu·∫≠n t·ª´ Binova Shop",
        html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px; background-color: #f9f9f9;">
          <h2 style="color: #1890ff; text-align: center;">
            ${
              isFirstReply
                ? "Ph·∫£n h·ªìi t·ª´ Binova Shop"
                : "C·∫≠p nh·∫≠t ph·∫£n h·ªìi t·ª´ Binova Shop"
            } 
            <span style="color: #ff4d4f;">Binova Shop</span>
          </h2>

          <p>Xin ch√†o <strong>${
            existingComment.userId.fullName || "b·∫°n"
          }</strong>,</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian ƒë·ªÉ chia s·∫ª c·∫£m nh·∫≠n c·ªßa m√¨nh v·ªÅ s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i. D∆∞·ªõi ƒë√¢y l√† n·ªôi dung b·∫°n ƒë√£ g·ª≠i v√† ph·∫£n h·ªìi c·ªßa ch√∫ng t√¥i:</p>

          <div style="background-color: #fff; border-left: 4px solid #1890ff; padding: 10px 15px; margin: 10px 0; font-style: italic; color: #333;">
            ${existingComment.content}
          </div>

          <p><strong>${
            isFirstReply
              ? "Ph·∫£n h·ªìi t·ª´ Binova Shop"
              : "Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t"
          }:</strong></p>
          <div style="background-color: #fff; border-left: 4px solid #52c41a; padding: 10px 15px; margin: 10px 0; color: #333;">
            ${adminReply}
          </div>

          <p style="margin-top: 24px;">N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>

         <p style="margin-top: 32px;">
          Tr√¢n tr·ªçng,<br/>
          <strong>Binova Shop</strong><br/>
          <i>ChƒÉm s√≥c kh√°ch h√†ng</i>
        </p>
        </div>
      `,
      });
    }

    return res.status(200).json({
      message: "Tr·∫£ l·ªùi b√¨nh lu·∫≠n th√†nh c√¥ng.",
      comment: updatedComment,
    });
  } catch (error) {
    return res.status(500).json({
      message: "ƒê√£ x·∫£y ra l·ªói khi tr·∫£ l·ªùi b√¨nh lu·∫≠n.",
      error: error.message,
    });
  }
};

// L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n c·ªßa ng∆∞·ªùi d√πng theo s·∫£n ph·∫©m(Ch·ªâ l·∫•y b√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c duy·ªát)
export const getCommentsForClient = async (req, res) => {
  try {
    const { id } = req.params;
    const productId = id;

    const product = await Product.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i." });
    }

    const comments = await Comment.find({
      productId,
      status: "visible",
    })
    .sort({ createdAt: -1 })
    .populate({
      path: "userId",
      select: "fullName avatar"
    })
    .populate({
      path: "productId",
      select: "name"
    });
    
    if (comments.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng c√≥ b√¨nh lu·∫≠n n√†o cho s·∫£n ph·∫©m n√†y." });
    }

    return res.status(200).json({
      averageRating: product.averageRating || 0,
      totalComments: comments.length,
      comments,
    });
  } catch (error) {
    return res
      .status(500)
      .json({ message: "L·ªói khi l·∫•y b√¨nh lu·∫≠n", error: error.message });
  }
};
