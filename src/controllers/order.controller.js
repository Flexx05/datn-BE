import Order from "../models/order.model.js";
import Voucher from "../models/voucher.model.js";
import Product from "../models/product.model.js";
import User from "../models/auth.model.js";
import { generateOrderCode } from "../services/order.service.js";
import mongoose from "mongoose";
import nodemailer from "nodemailer";

export const createOrder = async (req, res) => {
    try {
        const { userId, voucherCode = [], guestInfo, shippingAddress, items, shippingFee, paymentMethod } = req.body;

        const voucherIds = [];

        const user = await User.findById(userId);

        if(!user) {
            return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
        }

        if (!userId && (!guestInfo?.name || !guestInfo?.phone)) {
            return res.status(400).json({ error: "Kh√°ch v√£ng lai ph·∫£i cung c·∫•p t√™n v√† s·ªë ƒëi·ªán tho·∫°i." });
        }

        if (!items || !Array.isArray(items) || items.length === 0) {
            return res.status(400).json({ error: "ƒê∆°n h√†ng ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m" });
        }

        if (paymentMethod === "COD") {
            const variationIds = items.map((i) => i.variationId);
            const products = await Product.find({ "variation._id": { $in: variationIds } });
            const orderItems = [];

            for (const item of items) {
                // 1. T√¨m product ch·ª©a variation
                const product = products.find((p) => p.variation.some((v) => v._id.toString() === item.variationId));

                if (!product) {
                    return res.status(404).json({ error: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ch·ª©a bi·∫øn th·ªÉ ${item.variationId}` });
                }
////////////// ch∆∞a ki·ªÉm tra tr·∫°ng th√°i s·∫£n ph·∫©m
                // 2. L·∫•y bi·∫øn th·ªÉ
                const variation = product.variation.id(item.variationId);
                if (!variation) {
                    return res.status(404).json({ error: `Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ${item.variationId}` });
                }

                // 3. Ki·ªÉm tra s·ªë l∆∞·ª£ng
                if (item.quantity <= 0) {
                    return res.status(400).json({ error: "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0" });
                }

                if (item.quantity > variation.stock) {
                    return res.status(400).json({
                        error: `S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ${product.name} trong kho ch·ªâ c√≤n ${variation.stock}`,
                    });
                }

                let price = variation.regularPrice;

                if(variation.salePrice) {
                    price = variation.salePrice;
                }

                orderItems.push({
                    productId: product._id,
                    variationId: variation._id,
                    productName: product.name,
                    quantity: item.quantity,
                    priceAtOrder: price,
                    totalPrice: price * item.quantity,
                });
            }

            const subtotal = orderItems.reduce((sum, item) => sum + item.totalPrice, 0);

            let hasShippingVoucher = false;
            let hasProVoucher = false;
            let shippingFeeValue = shippingFee || 100000;
            let discountAmount = 0;

            const uniqueVoucher = new Set(voucherCode);
            if (uniqueVoucher.size !== voucherCode.length) {
                return res.status(400).json({ error: "Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng voucher gi·ªëng nhau trong c√πng m·ªôt ƒë∆°n h√†ng" });
            }

            for (const code of voucherCode) {
                const voucher = await Voucher.findOne({ code });

                if (!voucher) {
                    return res.status(400).json({ error: "Voucher kh√¥ng t·ªìn t·∫°i" });
                }

                voucherIds.push(voucher._id);

                const now = new Date();

                if (
                    !voucher ||
                    voucher.voucherStatus === "inactive" ||
                    voucher.voucherStatus === "expired" ||
                    now < new Date(voucher.startDate) ||
                    now > new Date(voucher.endDate)
                ) {
                    return res.status(400).json({ error: `Voucher ${voucher.code} kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n` });
                }

                if (voucher.used >= voucher.quantity) {
                    return res.status(400).json({ error: `Voucher ${voucher.code} ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng` });
                }

                if (voucher.minOrderValues > subtotal) {
                    return res.status(400).json({
                        error: `ƒê∆°n h√†ng t·ªëi thi·ªÉu ƒë·ªÉ s·ª≠ d·ª•ng voucher ${voucher.code} l√† ${voucher.minOrderValues}`,
                    });
                }

                if (voucher.voucherType === "product") {
                    if (hasProVoucher) {
                        return res.status(400).json({ error: "Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng 1 voucher gi·∫£m gi√° s·∫£n ph·∫©m m·ªói ƒë∆°n h√†ng." });
                    }
                    hasProVoucher = true;
                    if (voucher.discountType === "fixed") {
                        discountAmount += voucher.discountValue;
                    } else if (voucher.discountType === "percent") {
                        const discount = subtotal * (voucher.discountValue / 100);
                        if (discount > voucher.maxDiscount) {
                            discountAmount += voucher.maxDiscount;
                        } else {
                            discountAmount += discount;
                        }
                    }
                } else if (voucher.voucherType === "shipping") {
                    if (hasShippingVoucher) {
                        return res
                            .status(400)
                            .json({ error: "Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng 1 voucher gi·∫£m ph√≠ v·∫≠n chuy·ªÉn m·ªói ƒë∆°n h√†ng." });
                    }
                    hasShippingVoucher = true;
                    if (voucher.discountType === "fixed") {
                        shippingFeeValue -= voucher.discountValue;
                    } else if (voucher.discountType === "percent") {
                        const discount = shippingFeeValue * (voucher.discountValue / 100);
                        if (discount > voucher.maxDiscount) {
                            shippingFeeValue -= voucher.maxDiscount;
                        } else {
                            shippingFeeValue -= discount;
                        }
                    }
                }
            }

            if (shippingFeeValue < 0) shippingFeeValue = 0;

            const totalAmount = subtotal + shippingFeeValue - discountAmount;
            const orderCode = generateOrderCode();
            const order = new Order({
                userId: userId || undefined,
                guestInfo: !userId ? guestInfo : undefined,
                orderCode,
                voucherId: voucherIds,
                shippingAddress,
                items: orderItems,
                subtotal,
                shippingFee: shippingFeeValue,
                discountAmount,
                totalAmount,
                status: "Ch·ªù x·ª≠ l√Ω",
                paymentStatus: "Ch∆∞a thanh to√°n",
                paymentMethod,
                deliveryDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
            });

            const orderSave = await order.save();
            console.log("Order saved:", orderSave);

            if (orderSave) {
                if (orderSave.voucherId?.length) {
                    await Voucher.updateMany({ _id: { $in: orderSave.voucherId } }, { $inc: { used: 1 } });
                }

                for (const item of orderSave.items) {
                    await Product.updateOne(
                        { "variation._id": item.variationId },
                        { $inc: { "variation.$.stock": -item.quantity } }
                    );
                }

                const transporter = nodemailer.createTransport({
                    service: "gmail",
                    auth: {
                        user: "binovaweb73@gmail.com",
                        pass: "kcjf jurr rjva hqfu",
                    },
                });

                await transporter.sendMail({
                    from: '"Binova" <binovaweb73@gmail.com>',
                    to: req.user.email,
                    subject: `X√°c nh·∫≠n ƒë∆°n h√†ng ${orderSave.orderCode}`,
                    html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
                    <h2 style="color: #4CAF50; text-align: center">üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!</h2>
                    <p>Xin ch√†o <strong>${orderSave.name || "Qu√Ω kh√°ch"}</strong>,</p>
                    <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng <strong>${orderSave.orderCode}</strong> c·ªßa b·∫°n.</p>
                    
                    <h3>üì¶ Th√¥ng tin ƒë∆°n h√†ng:</h3>
                    <ul>
                        <li><strong>M√£ ƒë∆°n h√†ng:</strong> ${orderSave.orderCode}</li>
                        <li><strong>Tr·∫°ng th√°i:</strong> ${orderSave.status}</li>
                        <li><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${orderSave.paymentMethod}</li>
                        <li><strong>Tr·∫°ng th√°i thanh to√°n:</strong> ${orderSave.paymentStatus}</li>
                        <li><strong>Ng√†y giao d·ª± ki·∫øn:</strong> ${new Date(orderSave.deliveryDate).toLocaleDateString(
                            "vi-VN"
                        )}</li>
                    </ul>

                    <h3>üìç ƒê·ªãa ch·ªâ giao h√†ng:</h3>
                    <p>${orderSave.shippingAddress.address}, ${orderSave.shippingAddress.city}, ${
                        orderSave.shippingAddress.country
                    }</p>

                    <h3>üõí S·∫£n ph·∫©m:</h3>
                    <table style="width: 100%; border-collapse: collapse;">
                        <thead>
                        <tr style="background: #f0f0f0;">
                            <th style="text-align: left; padding: 8px;">T√™n s·∫£n ph·∫©m</th>
                            <th style="text-align: center; padding: 8px;">SL</th>
                            <th style="text-align: right; padding: 8px;">ƒê∆°n gi√°</th>
                            <th style="text-align: right; padding: 8px;">T·ªïng</th>
                        </tr>
                        </thead>
                        <tbody>
                        ${orderSave.items
                            .map(
                                (item) => `
                            <tr>
                            <td style="padding: 8px;">${item.productName}</td>
                            <td style="text-align: center;">${item.quantity}</td>
                            <td style="text-align: right;">${item.priceAtOrder.toLocaleString("vi-VN")} VNƒê</td>
                            <td style="text-align: right;">${item.totalPrice.toLocaleString("vi-VN")} VNƒê</td>
                            </tr>
                        `
                            )
                            .join("")}
                        </tbody>
                    </table>

                    <h3>üí∞ T√≥m t·∫Øt thanh to√°n:</h3>
                    <ul>
                        <li><strong>T·∫°m t√≠nh:</strong> ${orderSave.subtotal.toLocaleString("vi-VN")} VNƒê</li>
                        <li><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ${orderSave.shippingFee.toLocaleString("vi-VN")} VNƒê</li>
                        <li><strong>Gi·∫£m gi√°:</strong> ${orderSave.discountAmount.toLocaleString("vi-VN")} VNƒê</li>
                        <li><strong>T·ªïng c·ªông:</strong> <span style="color: #4CAF50; font-size: 16px;">${orderSave.totalAmount.toLocaleString(
                            "vi-VN"
                        )} VNƒê</span></li>
                    </ul>

                    <p style="margin-top: 30px;">C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i <strong>Binova</strong>! N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, h√£y ph·∫£n h·ªìi l·∫°i email n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
                    <div style="display: flex; justify-content: flex-end; margin-left: 68%;">
                        <div style="text-align: center;">
                            <p>Tr√¢n tr·ªçng</p>
                            <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
                        </div>
                    </div>
                    </div>
                `,
                });

                return res.status(201).json({
                    message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
                    order: orderSave,
                });
            }
        }
    } catch (error) {
        return res.status(400).json({ error: error.message });
    }
};

export const getAllOrders = async (req, res) => {
    try {
        const orders = await Order.find();
        return res.status(200).json(orders);
    } catch (error) {
        return res.status(400).json({ error: error.message });
    }
};

export const getOrderById = async (req, res) => {
    const userIdFromToken = req.user.id;
    const userRole = req.user.role;

    try {
        const order = await Order.findById(req.params.id);

        if (!order) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        }

        const isAdminOrStaff = userRole === "admin" || userRole === "staff";

        if (!isAdminOrStaff && order.userId.toString() !== userIdFromToken) {
            return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y" });
        }

        return res.status(200).json(order);
    } catch (error) {
        return res.status(400).json({ error: error.message });
    }
};

export const getOrderByUserId = async (req, res) => {
    try {
        const userId = req.user.id;
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ error: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá" });
        }

        const orders = await Order.find({ userId }).sort({ createdAt: -1 });
        if (!orders || orders.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng cho ng∆∞·ªùi d√πng n√†y" });
        }

        return res.status(200).json(orders);
    } catch (error) {
        return res.status(400).json({ error: error.message });
    }
};

export const getOrderByUserIdForAdminOrStaff = async (req, res) => {
    const {userId} = req.params;

    if(!mongoose.Types.ObjectId.isValid(userId)) {
        return res.status(400).json({ error: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá" });
    }

    try {
        const orders = await Order.find({ userId}).sort({createdAt: -1});
        return res.status(200).json(orders);
    }catch (error) {
        return res.status(400).json({ error: error.message });
    }
}

export const updateOrderStatus = async (req, res) => {
    try {
        const { id } = req.params;

        if(!req?.body?.status) {
            return res.status(400).json({ error: "Tr·∫°ng th√°i ƒë∆°n h√†ng l√† b·∫Øt bu·ªôc." });
        }

        const { status } = req.body;

        const allowedFields = ["status"];
        const unknownFields = Object.keys(req.body).filter((key) => !allowedFields.includes(key));
        if (unknownFields.length > 0) {
            return res.status(400).json({
                error: `Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t tr∆∞·ªùng: ${unknownFields.join(", ")}`,
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
        }

        const order = await Order.findById(id);
        if (!order) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        }

        const isSame = order.status === status 

        if (isSame) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t" });
        }

        if (status === "Th√†nh c√¥ng" && order.paymentStatus === "Ch∆∞a thanh to√°n") {
            return res.status(400).json({ error: "Kh√¥ng th·ªÉ ƒë√°nh d·∫•u ƒë∆°n h√†ng l√† 'Th√†nh c√¥ng' khi ch∆∞a thanh to√°n." });
        }

        const validStatusTransitions = {
          "Cho xac nhan": ["Da xac nhan", "Dang giao hang", "Da huy"],
          "Dang giao hang": ["Da giao hang", "Da huy"],
          "Da giao hang": [],
          "Da huy": [],
        };

        if (status !== order.status) {
            const allowedNextStatuses = validStatusTransitions[order.status];
            if (!allowedNextStatuses.includes(status)) {
                return res.status(400).json({
                    error: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i t·ª´ "${order.status}" sang "${status}"`,
                });
            }
            order.status = status;

            if(status === "ƒê√£ giao h√†ng"){
                order.deliveryDate = new Date();
            }
        }

        await order.save();
        console.log("Order updated status:", order);

        const subjectMap = {
            "ƒêang giao h√†ng": `ƒê∆°n h√†ng ${order.orderCode} ƒëang tr√™n ƒë∆∞·ªùng giao ƒë·∫øn b·∫°n`,
            "ƒê√£ giao h√†ng": `ƒê∆°n h√†ng ${order.orderCode} ƒë√£ ƒë∆∞·ª£c giao`,
            "Th√†nh c√¥ng": `ƒê∆°n h√†ng ${order.orderCode} ho√†n t·∫•t`,
            "ƒê√£ h·ªßy": `ƒê∆°n h√†ng ${order.orderCode} ƒë√£ b·ªã h·ªßy`,
        };

        const messageMap = {
            "ƒêang giao h√†ng": `ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn. Vui l√≤ng gi·ªØ li√™n l·∫°c ƒë·ªÉ nh·∫≠n h√†ng s·ªõm nh·∫•t.`,
            "ƒê√£ giao h√†ng": `ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao. Vui l√≤ng ki·ªÉm tra v√† x√°c nh·∫≠n n·∫øu c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ g√¨.`,
            "Th√†nh c√¥ng": `C·∫£m ∆°n b·∫°n! ƒê∆°n h√†ng ƒë√£ ho√†n t·∫•t. R·∫•t mong ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n l·∫ßn sau.`,
            "ƒê√£ h·ªßy": `ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy. N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i`,
        };

        if (!subjectMap[order.status]) return res.status(400).json({ error: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá" });

        const user = await User.findById(order.userId);

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: "binovaweb73@gmail.com",
                pass: "kcjf jurr rjva hqfu",
            },
        });

        await transporter.sendMail({
            from: '"Binova" <binovaweb73@gmail.com>',
            to: user.email,
            subject: subjectMap[order.status],
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
                    <h2 style="color: #4CAF50;">C·∫≠p nh·∫≠t ƒë∆°n h√†ng ${order.orderCode}</h2>
                    <p>Xin ch√†o <strong>${order.name || "Qu√Ω kh√°ch"}</strong>,</p>
                    <p>${messageMap[order.status]}</p>

                    <p style="margin-top: 30px;">N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, h√£y ph·∫£n h·ªìi email n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
                    <div style="text-align: right; margin-top: 40px;">
                        <p>Tr√¢n tr·ªçng,</p>
                        <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
                    </div>
                </div>
            `
        });

        return res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", order });
    } catch (error) {
        return res.status(500).json({ error: error.message });
    }
};

export const updatePaymentStatus = async (req, res) => {
    try {
        const { id } = req.params;

        if(!req?.body?.paymentStatus) {
            return res.status(400).json({ error: "Tr·∫°ng th√°i thanh to√°n l√† b·∫Øt bu·ªôc." });
        }

        const {paymentStatus} = req.body;

        const allowedFields = ["paymentStatus"];
        const unknownFields = Object.keys(req.body).filter((key) => !allowedFields.includes(key));
        if (unknownFields.length > 0) {
            return res.status(400).json({
                error: `Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t tr∆∞·ªùng: ${unknownFields.join(", ")}`,
            });
        }

        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({ error: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
        }

        const order = await Order.findById(id);
        if (!order) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
        }

        const isSame = order.paymentStatus === paymentStatus
        if (isSame) {
            return res.status(400).json({ error: "Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t" });
        }

        if (paymentStatus === "ƒê√£ thanh to√°n") {
            if (order.paymentMethod === "COD") {
                if (!["ƒê√£ giao h√†ng", "Th√†nh c√¥ng"].includes(order.status)) {
                return res.status(400).json({
                    error: "Ch·ªâ c·∫≠p nh·∫≠t 'ƒê√£ thanh to√°n' cho ƒë∆°n COD sau khi giao h√†ng th√†nh c√¥ng",
                });
                }
            }
        }

        if (paymentStatus === "ƒê√£ ho√†n ti·ªÅn" && !["ƒê√£ h·ªßy"].includes(order.status)) {
            return res.status(400).json({ error: "Ch·ªâ c√≥ th·ªÉ ho√†n ti·ªÅn cho ƒë∆°n ƒë√£ h·ªßy." });
        }

        if (paymentStatus && paymentStatus !== order.paymentStatus) {
            const validPaymentTransitions = {
                "Chua thanh toan": ["Da thanh toan", "That bai"],
                "That bai": [],
                "Da thanh toan": ["Da hoan tien"],
                "Da hoan tien": [],
            };

            const allowedNext = validPaymentTransitions[order.paymentStatus];
            if (!allowedNext.includes(paymentStatus)) {
                return res.status(400).json({
                    error: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i thanh to√°n t·ª´ "${order.paymentStatus}" sang "${paymentStatus}"`,
                });
            }

            order.paymentStatus = paymentStatus;
        }

        await order.save();
        console.log("Order updated payment-status:", order);

        const paymentSubjectMap = {
            "ƒê√£ thanh to√°n": `X√°c nh·∫≠n thanh to√°n ƒë∆°n h√†ng ${order.orderCode}`,
            "ƒê√£ ho√†n ti·ªÅn": `X√°c nh·∫≠n ho√†n ti·ªÅn ƒë∆°n h√†ng ${order.orderCode}`,
        };

        const paymentMessageMap = {
        "ƒê√£ thanh to√°n": `C·∫£m ∆°n b·∫°n! Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c thanh to√°n cho ƒë∆°n h√†ng ${order.orderCode}.`,
        "ƒê√£ ho√†n ti·ªÅn": `Ch√∫ng t√¥i ƒë√£ ho√†n ti·ªÅn cho ƒë∆°n h√†ng ${order.orderCode}. Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n c·ªßa b·∫°n.`,
        };

        if (!paymentSubjectMap[order.paymentStatus]) return res.status(400).json({ error: "Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá" });

        const user = await User.findById(order.userId);

        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
                user: "binovaweb73@gmail.com",
                pass: "kcjf jurr rjva hqfu",
            },
        });

        await transporter.sendMail({ 
            from: '"Binova" <binovaweb73@gmail.com>',
            to: user.email,
            subject: paymentSubjectMap[order.paymentStatus],
            html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
                    <h2 style="color: #2196F3;">Thanh to√°n ƒë∆°n h√†ng ${order.orderCode}</h2>
                    <p>Xin ch√†o <strong>${order.name || "Qu√Ω kh√°ch"}</strong>,</p>
                    <p>${paymentMessageMap[order.paymentStatus]}</p>

                    <p style="margin-top: 30px;">N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, h√£y ph·∫£n h·ªìi email n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
                    <div style="text-align: right; margin-top: 40px;">
                        <p>Tr√¢n tr·ªçng,</p>
                        <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
                    </div>
                </div>
            `
        });

        return res.status(200).json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng", order });
    } catch (error) {
        return res.status(500).json({ error: error.message });
    }
};
