import Order from "../models/order.model.js";
import Voucher from "../models/voucher.model.js";
import Product from "../models/product.model.js";
import User from "../models/auth.model.js";
import { generateOrderCode } from "../services/order.service.js";
import mongoose from "mongoose";
import nodemailer from "nodemailer";

export const createOrder = async (req, res) => {
  const session = await mongoose.startSession();

  try {
    const {
      userId,
      orderCode,
      voucherCode = [],
      recipientInfo,
      shippingAddress,
      items,
      shippingFee,
      paymentMethod,
      cartItemIds = [],
    } = req.body;

    // Validation c∆° b·∫£n
    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({
        error: "ƒê∆°n h√†ng ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m",
      });
    }

    if (
      !recipientInfo ||
      !recipientInfo.name ||
      !recipientInfo.email ||
      !recipientInfo.phone
    ) {
      return res.status(400).json({
        error: "Th√¥ng tin ng∆∞·ªùi nh·∫≠n kh√¥ng ƒë·∫ßy ƒë·ªß",
      });
    }

    // if (!shippingAddress || !shippingAddress.address || !shippingAddress.city) {
    //   return res.status(400).json({
    //     error: "ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng ƒë·∫ßy ƒë·ªß"
    //   });
    // }

    // B·∫Øt ƒë·∫ßu transaction
    session.startTransaction();

    if (paymentMethod === "COD" || paymentMethod === "VNPAY") {
      const variationIds = items.map((i) => i.variationId);
      const products = await Product.find({
        "variation._id": { $in: variationIds },
      }).session(session);

      const orderItems = [];
      const voucherIds = [];

      // X·ª≠ l√Ω v√† validate t·ª´ng item
      for (const item of items) {
        // 1. T√¨m product ch·ª©a variation
        const product = products.find((p) =>
          p.variation.some((v) => v._id.toString() === item.variationId)
        );

        if (!product) {
          throw new Error(
            `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ch·ª©a bi·∫øn th·ªÉ ${item.variationId}`
          );
        }

        // 2. L·∫•y bi·∫øn th·ªÉ
        const variation = product.variation.id(item.variationId);
        if (!variation) {
          throw new Error(`Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ ${item.variationId}`);
        }

        if (!variation.isActive) {
          throw new Error(
            `Bi·∫øn th·ªÉ ${variation._id} c·ªßa s·∫£n ph·∫©m ${product.name} kh√¥ng kh·∫£ d·ª•ng`
          );
        }

        // 3. Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if (item.quantity <= 0) {
          throw new Error("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0");
        }

        if (item.quantity > variation.stock) {
          throw new Error(
            `S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ${product.name} trong kho ch·ªâ c√≤n ${variation.stock}`
          );
        }

        // 4. T√≠nh gi√°
        let price = variation.regularPrice;
        if (variation.salePrice && variation.salePrice > 0) {
          price = variation.salePrice;
        }

        orderItems.push({
          productId: product._id,
          variationId: variation._id,
          productName: product.name,
          quantity: item.quantity,
          priceAtOrder: price,
          totalPrice: price * item.quantity,
        });
      }

      // T√≠nh subtotal
      const subtotal = orderItems.reduce(
        (sum, item) => sum + item.totalPrice,
        0
      );

      // X·ª≠ l√Ω voucher
      let hasShippingVoucher = false;
      let hasProVoucher = false;
      let shippingFeeValue = shippingFee || 40000; // C·∫≠p nh·∫≠t theo b·∫£n ghi m·∫´u
      let discountAmount = 0;

      // Ki·ªÉm tra voucher tr√πng l·∫∑p
      const uniqueVoucher = new Set(voucherCode);
      if (uniqueVoucher.size !== voucherCode.length) {
        throw new Error(
          "Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng voucher gi·ªëng nhau trong c√πng m·ªôt ƒë∆°n h√†ng"
        );
      }

      // X·ª≠ l√Ω t·ª´ng voucher
      for (const code of voucherCode) {
        const voucher = await Voucher.findOne({ code }).session(session);

        if (!voucher) {
          throw new Error(`Voucher ${code} kh√¥ng t·ªìn t·∫°i`);
        }

        voucherIds.push(voucher._id);

        const now = new Date();

        // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa voucher
        if (
          voucher.voucherStatus === "inactive" ||
          voucher.voucherStatus === "expired" ||
          now < new Date(voucher.startDate) ||
          now > new Date(voucher.endDate)
        ) {
          throw new Error(
            `Voucher ${voucher.code} kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n`
          );
        }

        if (voucher.used >= voucher.quantity) {
          throw new Error(`Voucher ${voucher.code} ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng`);
        }

        if (voucher.minOrderValues > subtotal) {
          throw new Error(
            `ƒê∆°n h√†ng t·ªëi thi·ªÉu ƒë·ªÉ s·ª≠ d·ª•ng voucher ${
              voucher.code
            } l√† ${voucher.minOrderValues.toLocaleString()}‚Ç´`
          );
        }

        // √Åp d·ª•ng voucher
        if (voucher.voucherType === "product") {
          if (hasProVoucher) {
            throw new Error(
              "Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng 1 voucher gi·∫£m gi√° s·∫£n ph·∫©m m·ªói ƒë∆°n h√†ng"
            );
          }
          hasProVoucher = true;

          if (voucher.discountType === "fixed") {
            discountAmount += voucher.discountValue;
          } else if (voucher.discountType === "percent") {
            const discount = subtotal * (voucher.discountValue / 100);
            if (discount > voucher.maxDiscount) {
              discountAmount += voucher.maxDiscount;
            } else {
              discountAmount += discount;
            }
          }
        } else if (voucher.voucherType === "shipping") {
          if (hasShippingVoucher) {
            throw new Error(
              "Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng 1 voucher gi·∫£m ph√≠ v·∫≠n chuy·ªÉn m·ªói ƒë∆°n h√†ng"
            );
          }
          hasShippingVoucher = true;

          if (voucher.discountType === "fixed") {
            shippingFeeValue -= voucher.discountValue;
          } else if (voucher.discountType === "percent") {
            const discount = shippingFeeValue * (voucher.discountValue / 100);
            if (discount > voucher.maxDiscount) {
              shippingFeeValue -= voucher.maxDiscount;
            } else {
              shippingFeeValue -= discount;
            }
          }
        }
      }

      // ƒê·∫£m b·∫£o ph√≠ ship kh√¥ng √¢m
      if (shippingFeeValue < 0) shippingFeeValue = 0;

      // T√≠nh t·ªïng ti·ªÅn
      const totalAmount = subtotal + shippingFeeValue - discountAmount;

      // T√≠nh ng√†y giao h√†ng d·ª± ki·∫øn (7 ng√†y t·ª´ hi·ªán t·∫°i)
      const expectedDeliveryDate = new Date();
      expectedDeliveryDate.setDate(expectedDeliveryDate.getDate() + 7);

      // T·∫°o order object
      const order = new Order({
        userId: userId || undefined,
        recipientInfo,
        orderCode: orderCode,
        voucherId: voucherIds,
        shippingAddress,
        items: orderItems,
        subtotal,
        shippingFee: shippingFeeValue,
        discountAmount,
        totalAmount,
        status: 0,
        paymentStatus: 0,
        paymentMethod,
        expectedDeliveryDate,
      });

      // L∆∞u order v·ªõi session
      const orderSave = await order.save({ session });
      console.log("Order saved:", orderSave);

      if (orderSave) {
        // C·∫≠p nh·∫≠t voucher usage
        if (orderSave.voucherId?.length) {
          await Voucher.updateMany(
            { _id: { $in: orderSave.voucherId } },
            { $inc: { used: 1 } },
            { session }
          );
        }

        // C·∫≠p nh·∫≠t stock s·∫£n ph·∫©m
        for (const item of orderSave.items) {
          await Product.updateOne(
            { "variation._id": item.variationId },
            { $inc: { "variation.$.stock": -item.quantity } },
            { session }
          );
        }

        // X√≥a cart items n·∫øu c√≥
        if (cartItemIds && cartItemIds.length > 0) {
          const deleteResult = await Cart.deleteMany(
            {
              _id: { $in: cartItemIds },
              userId: userId,
            },
            { session }
          );
          console.log(
            `ƒê√£ x√≥a ${deleteResult.deletedCount} items kh·ªèi gi·ªè h√†ng`
          );
        }

        // Commit transaction
        await session.commitTransaction();

        // G·ª≠i email x√°c nh·∫≠n (sau khi commit th√†nh c√¥ng)
        try {
          const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
              user: "binovaweb73@gmail.com",
              pass: "kcjf jurr rjva hqfu",
            },
          });

          await transporter.sendMail({
            from: '"Binova" <binovaweb73@gmail.com>',
            to: recipientInfo.email,
            subject: `X√°c nh·∫≠n ƒë∆°n h√†ng ${orderSave.orderCode}`,
            html: `
              <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
                <h2 style="color: #4CAF50; text-align: center">üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!</h2>
                <p>Xin ch√†o <strong>${
                  orderSave.recipientInfo.name || "Qu√Ω kh√°ch"
                }</strong>,</p>
                <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng <strong>${
                  orderSave.orderCode
                }</strong> c·ªßa b·∫°n.</p>
                
                <h3>üì¶ Th√¥ng tin ƒë∆°n h√†ng:</h3>
                <ul>
                    <li><strong>M√£ ƒë∆°n h√†ng:</strong> ${
                      orderSave.orderCode
                    }</li>
                    <li><strong>Tr·∫°ng th√°i:</strong> ${orderSave.status}</li>
                    <li><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${
                      orderSave.paymentMethod
                    }</li>
                    <li><strong>Tr·∫°ng th√°i thanh to√°n:</strong> ${
                      orderSave.paymentStatus
                    }</li>
                    <li><strong>Ng√†y giao d·ª± ki·∫øn:</strong> ${new Date(
                      orderSave.expectedDeliveryDate
                    ).toLocaleDateString("vi-VN")}</li>
                </ul>

                <h3>üìç ƒê·ªãa ch·ªâ giao h√†ng:</h3>
                <p>${orderSave.shippingAddress.address}, ${
              orderSave.shippingAddress.city
            }, ${orderSave.shippingAddress.country}</p>

                <h3>üõí S·∫£n ph·∫©m:</h3>
                <table style="width: 100%; border-collapse: collapse;">
                    <thead>
                    <tr style="background: #f0f0f0;">
                        <th style="text-align: left; padding: 8px;">T√™n s·∫£n ph·∫©m</th>
                        <th style="text-align: center; padding: 8px;">SL</th>
                        <th style="text-align: right; padding: 8px;">ƒê∆°n gi√°</th>
                        <th style="text-align: right; padding: 8px;">T·ªïng</th>
                    </tr>
                    </thead>
                    <tbody>
                    ${orderSave.items
                      .map(
                        (item) => `
                        <tr>
                        <td style="padding: 8px;">${item.productName}</td>
                        <td style="text-align: center;">${item.quantity}</td>
                        <td style="text-align: right;">${item.priceAtOrder.toLocaleString(
                          "vi-VN"
                        )} VNƒê</td>
                        <td style="text-align: right;">${item.totalPrice.toLocaleString(
                          "vi-VN"
                        )} VNƒê</td>
                        </tr>
                    `
                      )
                      .join("")}
                    </tbody>
                </table>

                <h3>üí∞ T√≥m t·∫Øt thanh to√°n:</h3>
                <ul>
                    <li><strong>T·∫°m t√≠nh:</strong> ${orderSave.subtotal.toLocaleString(
                      "vi-VN"
                    )} VNƒê</li>
                    <li><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ${orderSave.shippingFee.toLocaleString(
                      "vi-VN"
                    )} VNƒê</li>
                    <li><strong>Gi·∫£m gi√°:</strong> ${orderSave.discountAmount.toLocaleString(
                      "vi-VN"
                    )} VNƒê</li>
                    <li><strong>T·ªïng c·ªông:</strong> <span style="color: #4CAF50; font-size: 16px;">${orderSave.totalAmount.toLocaleString(
                      "vi-VN"
                    )} VNƒê</span></li>
                </ul>

                <p style="margin-top: 30px;">C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i <strong>Binova</strong>! N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, h√£y ph·∫£n h·ªìi l·∫°i email n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
                <div style="display: flex; justify-content: flex-end; margin-left: 68%;">
                    <div style="text-align: center;">
                        <p>Tr√¢n tr·ªçng</p>
                        <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
                    </div>
                </div>
              </div>
            `,
          });
        } catch (emailError) {
          console.error("L·ªói g·ª≠i email:", emailError);
          // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn response
        }

        return res.status(201).json({
          message:
            "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v√† ƒë√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng",
          order: orderSave,
          cartItemsRemoved: cartItemIds.length,
        });
      }
    } else {
      console.log(1);
      
      throw new Error("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£");
    }
  } catch (error) {
    console.error("L·ªói trong transaction:", error);

    // Ch·ªâ abort n·∫øu transaction ch∆∞a ƒë∆∞·ª£c commit
    if (session.inTransaction()) {
      await session.abortTransaction();
    }

    return res.status(400).json({ error: error.message });
  } finally {
    // Lu√¥n end session
    await session.endSession();
  }
};

export const getAllOrders = async (req, res) => {
  try {
    const orders = await Order.find();
    return res.status(200).json(orders);
  } catch (error) {
    return res.status(400).json({ error: error.message });
  }
};

export const getOrderById = async (req, res) => {
  try {
    // Find order v√† populate product details v·ªõi variation
    const order = await Order.findById(req.params.id).populate({
      path: "items.productId",
      select: "name variation",
    });

    if (!order) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // X·ª≠ l√Ω items ƒë·ªÉ ch·ªâ l·∫•y variation attributes t∆∞∆°ng ·ª©ng v·ªõi variationId
    const processedItems = order.items.map((item) => {
      const product = item.productId;

      // T√¨m variation c·ª• th·ªÉ d·ª±a tr√™n variationId
      const matchedVariation = product.variation.find(
        (v) => v._id.toString() === item.variationId.toString()
      );

      return {
        ...item.toObject(),
        // Ch·ªâ tr·∫£ v·ªÅ attributes c·ªßa variation ƒë∆∞·ª£c ch·ªçn
        variantAttributes: matchedVariation ? matchedVariation.attributes : [],
      };
    });

    const orderObject = order.toObject();
    orderObject.items = processedItems;

    return res.status(200).json(orderObject);
  } catch (error) {
    return res.status(400).json({ error: error.message });
  }
};

export const getOrderByUserId = async (req, res) => {
  try {
    const userId = req.user.id;

    if (!userId) {
      return res.status(400).json({ error: "ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c" });
    }

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá" });
    }

    const orders = await Order.find({ userId }).sort({ createdAt: -1 });
    if (!orders || orders.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng cho ng∆∞·ªùi d√πng n√†y" });
    }

    return res.status(200).json(orders);
  } catch (error) {
    return res.status(400).json({ error: error.message });
  }
};

export const updateOrderStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { status, paymentStatus, deliveryDate } = req.body;

    // Ki·ªÉm tra c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t
    const allowedFields = ["status", "paymentStatus", "deliveryDate"];
    const unknownFields = Object.keys(req.body).filter(
      (key) => !allowedFields.includes(key)
    );
    if (unknownFields.length > 0) {
      return res.status(400).json({
        error: `Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t tr∆∞·ªùng: ${unknownFields.join(", ")}`,
      });
    }

    // Ki·ªÉm tra ID h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
    }

    // T√¨m ƒë∆°n h√†ng
    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    // Ki·ªÉm tra c√≥ thay ƒë·ªïi hay kh√¥ng
    const isSame =
      order.status === status &&
      order.paymentStatus === paymentStatus &&
      new Date(order.deliveryDate).getTime() ===
        new Date(deliveryDate).getTime();

    if (isSame) {
      return res.status(400).json({ error: "Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    // ƒê·ªãnh nghƒ©a c√°c tr·∫°ng th√°i h·ª£p l·ªá
    const validStatusTransitions = {
      0: [1, 5],
      1: [2, 5],
      2: [3], 
      3: [4],
      4: [],
      5: [],
      6: [],
    };

    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    if (status && status !== order.status) {
      const allowedNextStatuses = validStatusTransitions[order.status];

      if (!allowedNextStatuses) {
        return res.status(400).json({
          error: `Tr·∫°ng th√°i hi·ªán t·∫°i "${order.status}" kh√¥ng h·ª£p l·ªá`,
        });
      }

      if (!allowedNextStatuses.includes(status)) {
        return res.status(400).json({
          error: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i t·ª´ "${order.status}" sang "${status}"`,
        });
      }
      order.status = status;
    }

    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
    if (paymentStatus && paymentStatus !== order.paymentStatus) {
      const validPaymentTransitions = {
        0: [1],
        1: [2],
        2: [],
      };

      const allowedNext = validPaymentTransitions[order.paymentStatus];

      if (!allowedNext) {
        return res.status(400).json({
          error: `Tr·∫°ng th√°i thanh to√°n hi·ªán t·∫°i "${order.paymentStatus}" kh√¥ng h·ª£p l·ªá`,
        });
      }

      if (!allowedNext.includes(paymentStatus)) {
        return res.status(400).json({
          error: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i thanh to√°n t·ª´ "${order.paymentStatus}" sang "${paymentStatus}"`,
        });
      }

      order.paymentStatus = paymentStatus;
    }

    // C·∫≠p nh·∫≠t ng√†y giao h√†ng
    if (deliveryDate) {
      order.deliveryDate = new Date(deliveryDate);
    }

    // L∆∞u thay ƒë·ªïi
    await order.save();
    console.log("Order updated status:", order);

    // Mapping cho email
    const subjectMap = {
      0: `ƒê∆°n h√†ng ${order.orderCode} ƒëang ch·ªù x√°c nh·∫≠n`,
      1: `ƒê∆°n h√†ng ${order.orderCode} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n`,
      2: `ƒê∆°n h√†ng ${order.orderCode} ƒëang ƒë∆∞·ª£c giao`,
      3: `ƒê∆°n h√†ng ${order.orderCode} ƒë√£ ƒë∆∞·ª£c giao`,
      4: `ƒê∆°n h√†ng ${order.orderCode} ho√†n t·∫•t`,
      5: `ƒê∆°n h√†ng ${order.orderCode} ƒë√£ b·ªã h·ªßy`,
    };

    const messageMap = {
      0: `Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa b·∫°n v√† ƒëang ch·ªù x√°c nh·∫≠n.`,
      1: `ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã ƒë·ªÉ giao.`,
      2: `ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn. Vui l√≤ng gi·ªØ li√™n l·∫°c ƒë·ªÉ nh·∫≠n h√†ng s·ªõm nh·∫•t.`,
      3: `ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c giao. Vui l√≤ng ki·ªÉm tra v√† x√°c nh·∫≠n n·∫øu c√≥ b·∫•t k·ª≥ v·∫•n ƒë·ªÅ g√¨.`,
      4: `C·∫£m ∆°n b·∫°n! ƒê∆°n h√†ng ƒë√£ ho√†n t·∫•t. R·∫•t mong ƒë∆∞·ª£c ph·ª•c v·ª• b·∫°n l·∫ßn sau.`,
      5: `ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ b·ªã h·ªßy. N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.`,
    };

    // Ki·ªÉm tra tr·∫°ng th√°i c√≥ h·ª£p l·ªá ƒë·ªÉ g·ª≠i email
    if (!subjectMap[order.status]) {
      return res
        .status(400)
        .json({ error: "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá ƒë·ªÉ g·ª≠i email" });
    }

    // G·ª≠i email th√¥ng b√°o
    try {
      const transporter = nodemailer.createTransport({
        service: "gmail",
        auth: {
          user: "binovaweb73@gmail.com",
          pass: "kcjf jurr rjva hqfu",
        },
      });

      await transporter.sendMail({
        from: '"Binova" <binovaweb73@gmail.com>',
        to: "phongne2005@gmail.com",
        subject: subjectMap[order.status],
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
            <h2 style="color: #4CAF50;">C·∫≠p nh·∫≠t ƒë∆°n h√†ng ${
              order.orderCode
            }</h2>
            <p>Xin ch√†o <strong>${
              order.recipientInfo.name || "Qu√Ω kh√°ch"
            }</strong>,</p>
            <p>${messageMap[order.status]}</p>
            
            <div style="background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin: 20px 0;">
              <h3 style="margin-top: 0; color: #333;">Th√¥ng tin ƒë∆°n h√†ng:</h3>
              <p><strong>M√£ ƒë∆°n h√†ng:</strong> ${order.orderCode}</p>
              <p><strong>Tr·∫°ng th√°i:</strong> ${order.status}</p>
              <p><strong>Tr·∫°ng th√°i thanh to√°n:</strong> ${
                order.paymentStatus
              }</p>
              ${
                order.deliveryDate
                  ? `<p><strong>Ng√†y giao d·ª± ki·∫øn:</strong> ${new Date(
                      order.deliveryDate
                    ).toLocaleDateString("vi-VN")}</p>`
                  : ""
              }
            </div>

            <p style="margin-top: 30px;">N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, h√£y ph·∫£n h·ªìi email n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
            <div style="text-align: right; margin-top: 40px;">
              <p>Tr√¢n tr·ªçng,</p>
              <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
            </div>
          </div>
        `,
      });
    } catch (emailError) {
      console.error("L·ªói g·ª≠i email:", emailError);
      // Kh√¥ng return l·ªói ·ªü ƒë√¢y v√¨ ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng
    }

    return res.status(200).json({
      message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
      order: {
        id: order._id,
        orderCode: order.orderCode,
        status: order.status,
        paymentStatus: order.paymentStatus,
        deliveryDate: order.deliveryDate,
      },
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    return res.status(500).json({
      error: "L·ªói server khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng",
      details: error.message,
    });
  }
};

export const updatePaymentStatus = async (req, res) => {
  try {
    const { id } = req.params;

    if (!req?.body?.paymentStatus) {
      return res
        .status(400)
        .json({ error: "Tr·∫°ng th√°i thanh to√°n l√† b·∫Øt bu·ªôc." });
    }

    const { paymentStatus } = req.body;

    const allowedFields = ["paymentStatus"];
    const unknownFields = Object.keys(req.body).filter(
      (key) => !allowedFields.includes(key)
    );
    if (unknownFields.length > 0) {
      return res.status(400).json({
        error: `Kh√¥ng ƒë∆∞·ª£c ph√©p c·∫≠p nh·∫≠t tr∆∞·ªùng: ${unknownFields.join(", ")}`,
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    const isSame = order.paymentStatus === paymentStatus;
    if (isSame) {
      return res.status(400).json({ error: "Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    if (paymentStatus === "Da thanh toan") {
      if (order.paymentMethod === "COD") {
        if (!["Da giao hang"].includes(order.status)) {
          return res.status(400).json({
            error:
              "Ch·ªâ c·∫≠p nh·∫≠t 'Da thanh toan' cho ƒë∆°n COD sau khi ƒë√£ giao h√†ng",
          });
        }
      }
    }

    if (paymentStatus && paymentStatus !== order.paymentStatus) {
      const validPaymentTransitions = {
        0 : [1],
        1 : [2],
        2 : [],
      };

      const allowedNext = validPaymentTransitions[order.paymentStatus];
      if (!allowedNext.includes(paymentStatus)) {
        return res.status(400).json({
          error: `Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i thanh to√°n t·ª´ "${order.paymentStatus}" sang "${paymentStatus}"`,
        });
      }

      order.paymentStatus = paymentStatus;
    }

    await order.save();
    console.log("Order updated payment-status:", order);

    const paymentSubjectMap = {
      "ƒê√£ thanh to√°n": `X√°c nh·∫≠n thanh to√°n ƒë∆°n h√†ng ${order.orderCode}`,
      "ƒê√£ ho√†n ti·ªÅn": `X√°c nh·∫≠n ho√†n ti·ªÅn ƒë∆°n h√†ng ${order.orderCode}`,
    };

    const paymentMessageMap = {
      1: `C·∫£m ∆°n b·∫°n! Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c thanh to√°n cho ƒë∆°n h√†ng ${order.orderCode}.`,
      2: `Ch√∫ng t√¥i ƒë√£ ho√†n ti·ªÅn cho ƒë∆°n h√†ng ${order.orderCode}. Vui l√≤ng ki·ªÉm tra t√†i kho·∫£n c·ªßa b·∫°n.`,
    };

    if (!paymentSubjectMap[order.paymentStatus])
      return res
        .status(400)
        .json({ error: "Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá" });

    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "binovaweb73@gmail.com",
        pass: "kcjf jurr rjva hqfu",
      },
    });

    await transporter.sendMail({
      from: '"Binova" <binovaweb73@gmail.com>',
      to: "phongne2005@gmail.com",
      subject: paymentSubjectMap[order.paymentStatus],
      html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
                    <h2 style="color: #2196F3;">Thanh to√°n ƒë∆°n h√†ng ${
                      order.orderCode
                    }</h2>
                    <p>Xin ch√†o <strong>${
                      orderSave.recipientInfo.name || "Qu√Ω kh√°ch"
                    }</strong>,</p>
                    <p>${paymentMessageMap[order.paymentStatus]}</p>

                    <p style="margin-top: 30px;">N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, h√£y ph·∫£n h·ªìi email n√†y ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>
                    <div style="text-align: right; margin-top: 40px;">
                        <p>Tr√¢n tr·ªçng,</p>
                        <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
                    </div>
                </div>
            `,
    });

    return res
      .status(200)
      .json({ message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng", order });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};

export const cancelOrder = async (req, res) => {
  try {
    const { id } = req.params;
    const { orderCode, email } = req.body;

    const userId = req.user?.id;
    const userRole = req.user?.role;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá" });
    }

    const order = await Order.findById(id);

    if (!order) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }

    const isAdminOrStaff = userRole === "admin" || userRole === "staff";
    const isOwner = userId && order.userId?.toString() === userId;

    const isGuest = !userId;

    // 2. N·∫øu l√† kh√°ch ch∆∞a ƒëƒÉng nh·∫≠p -> ki·ªÉm tra orderCode v√† email (kh√¥ng bi·∫øt c√≥ c·∫ßn OTP kh√¥ng)
    if (isGuest) {
      if (!orderCode || !email) {
        return res.status(400).json({
          error:
            "Kh√°ch ch∆∞a ƒëƒÉng nh·∫≠p c·∫ßn cung c·∫•p orderCode v√† email ƒë·ªÉ h·ªßy ƒë∆°n.",
        });
      }

      if (
        order.orderCode !== orderCode ||
        order.recipientInfo.email !== email
      ) {
        return res
          .status(403)
          .json({ error: "Th√¥ng tin x√°c nh·∫≠n kh√¥ng ƒë√∫ng. Kh√¥ng th·ªÉ h·ªßy ƒë∆°n." });
      }
    } else if (!isOwner && !isAdminOrStaff) {
      // 3. N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p nh∆∞ng kh√¥ng ph·∫£i admin/staff ho·∫∑c ch·ªß ƒë∆°n
      return res
        .status(403)
        .json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y" });
    }

    // 4. Ch·ªâ cho ph√©p h·ªßy n·∫øu tr·∫°ng th√°i l√† "Ch·ªù x√°c nh·∫≠n" ho·∫∑c "ƒê√£ x√°c nh·∫≠n"
    const cancelableStatus = ["Cho xac nhan", "Da xac nhan"];
    if (!cancelableStatus.includes(order.status)) {
      return res.status(400).json({
        error: `Ch·ªâ ƒë∆∞·ª£c h·ªßy ƒë∆°n h√†ng khi ƒëang ·ªü tr·∫°ng th√°i: ${cancelableStatus.join(
          ", "
        )}`,
      });
    }

    // 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i, ho√†n h√†ng v√† ho√†n voucher
    // ƒêang l√†m cho ƒë∆°n COD, n·∫øu l√† ƒë∆°n thanh to√°n online th√¨ c·∫ßn ho√†n ti·ªÅn v·ªÅ v√≠ v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n l√† "Da hoan tien"
    if (order.paymentStatus === "Da thanh toan") {
      // TODO: g·ªçi h√†m ho√†n ti·ªÅn qua c·ªïng thanh to√°n
      order.paymentStatus = "Da hoan tien";
    }

    order.status = "Da huy";

    for (const item of order.items) {
      await Product.updateOne(
        { "variation._id": item.variationId },
        { $inc: { "variation.$.stock": item.quantity } }
      );
    }

    if (order.voucherId?.length > 0) {
      await Voucher.updateMany(
        { _id: { $in: order.voucherId } },
        { $inc: { used: -1 } }
      );
    }

    await order.save();

    // 6. G·ª≠i email th√¥ng b√°o
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: "binovaweb73@gmail.com",
        pass: "kcjf jurr rjva hqfu",
      },
    });

    await transporter.sendMail({
      from: '"Binova" <binovaweb73@gmail.com>',
      to: order.recipientInfo.email,
      subject: `ƒê∆°n h√†ng ${order.orderCode} ƒë√£ b·ªã h·ªßy`,
      html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px;">
                    <h2 style="color: #f44336;">ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy</h2>
                    <p>Xin ch√†o <strong>${
                      order.recipientInfo.name || "Qu√Ω kh√°ch"
                    }</strong>,</p>
                    <p>ƒê∆°n h√†ng <strong>${
                      order.orderCode
                    }</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy.</p>
                    <p>N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.</p>
                    <div style="text-align: right; margin-top: 40px;">
                        <p>Tr√¢n tr·ªçng,</p>
                        <i><strong>ƒê·ªôi ng≈© Binova</strong></i>
                    </div>
                </div>
            `,
    });

    return res
      .status(200)
      .json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng", order });
  } catch (error) {
    console.error("H·ªßy ƒë∆°n th·∫•t b·∫°i:", error.message);
    return res.status(500).json({ error: error.message });
  }
};
